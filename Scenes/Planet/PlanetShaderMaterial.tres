[gd_resource type="ShaderMaterial" load_steps=13 format=2]

[sub_resource type="VisualShaderNodeVectorOp" id=5]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=6]

[sub_resource type="VisualShaderNodeVectorScalarStep" id=7]
default_input_values = [ 0, 0.5, 1, Vector3( 0, 0, 0 ) ]

[sub_resource type="VisualShaderNodeVectorOp" id=8]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1, 1, 1 ) ]
operator = 1

[sub_resource type="VisualShaderNodeVectorFunc" id=9]
function = 6

[sub_resource type="VisualShaderNodeTextureUniform" id=1]
uniform_name = "TextureUniform"

[sub_resource type="VisualShaderNodeColorUniform" id=10]
uniform_name = "dryColor"
default_value_enabled = true
default_value = Color( 0.07, 0.0476, 0.014, 1 )

[sub_resource type="VisualShaderNodeVectorOp" id=11]
operator = 2

[sub_resource type="VisualShaderNodeColorUniform" id=12]
uniform_name = "liveColor"
default_value_enabled = true
default_value = Color( 0.12308, 0.17, 0.0136, 1 )

[sub_resource type="VisualShader" id=2]
code = "shader_type spatial;
render_mode specular_schlick_ggx, async_visible;

uniform sampler2D TextureUniform;
uniform vec4 dryColor : hint_color = vec4(0.070000, 0.047600, 0.014000, 1.000000);
uniform vec4 liveColor : hint_color = vec4(0.123080, 0.170000, 0.013600, 1.000000);



void vertex() {
// Output:0

}

void fragment() {
// TextureUniform:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 n_tex_read = texture(TextureUniform, UV.xy);
		n_out2p0 = n_tex_read.rgb;
		n_out2p1 = n_tex_read.a;
	}

// VectorScalarStep:13
	float n_in13p0 = 0.50000;
	vec3 n_out13p0 = step(n_in13p0, n_out2p0);

// ColorUniform:3
	vec3 n_out3p0 = dryColor.rgb;
	float n_out3p1 = dryColor.a;

// VectorOp:4
	vec3 n_out4p0 = n_out13p0 * n_out3p0;

// VectorOp:14
	vec3 n_in14p1 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_out14p0 = n_out13p0 - n_in14p1;

// VectorFunc:15
	vec3 n_out15p0 = abs(n_out14p0);

// ColorUniform:9
	vec3 n_out9p0 = liveColor.rgb;
	float n_out9p1 = liveColor.a;

// VectorOp:10
	vec3 n_out10p0 = n_out15p0 * n_out9p0;

// VectorOp:11
	vec3 n_out11p0 = n_out4p0 + n_out10p0;

// Output:0
	ALBEDO = n_out11p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -624.899, 14.3544 )
nodes/fragment/0/position = Vector2( 680, 320 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -660, 120 )
nodes/fragment/3/node = SubResource( 10 )
nodes/fragment/3/position = Vector2( -660, 320 )
nodes/fragment/4/node = SubResource( 11 )
nodes/fragment/4/position = Vector2( 240, 340 )
nodes/fragment/9/node = SubResource( 12 )
nodes/fragment/9/position = Vector2( -660, 580 )
nodes/fragment/10/node = SubResource( 5 )
nodes/fragment/10/position = Vector2( 240, 480 )
nodes/fragment/11/node = SubResource( 6 )
nodes/fragment/11/position = Vector2( 440, 360 )
nodes/fragment/13/node = SubResource( 7 )
nodes/fragment/13/position = Vector2( -440, 180 )
nodes/fragment/14/node = SubResource( 8 )
nodes/fragment/14/position = Vector2( -160, 480 )
nodes/fragment/15/node = SubResource( 9 )
nodes/fragment/15/position = Vector2( 40, 500 )
nodes/fragment/connections = PoolIntArray( 3, 0, 4, 1, 9, 0, 10, 1, 4, 0, 11, 0, 10, 0, 11, 1, 2, 0, 13, 1, 13, 0, 4, 0, 13, 0, 14, 0, 11, 0, 0, 0, 14, 0, 15, 0, 15, 0, 10, 0 )

[sub_resource type="OpenSimplexNoise" id=3]
period = 39.9

[sub_resource type="NoiseTexture" id=4]
noise = SubResource( 3 )

[resource]
shader = SubResource( 2 )
shader_param/dryColor = Color( 0.317647, 0.2, 0.0235294, 1 )
shader_param/liveColor = Color( 0.364706, 0.392157, 0.0627451, 1 )
shader_param/TextureUniform = SubResource( 4 )
